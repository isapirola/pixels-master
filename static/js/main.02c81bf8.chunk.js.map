{"version":3,"sources":["utils/index.js","components/FileDropzone.js","components/PaletteGenerate.js","components/PalettePixels.js","components/PaletteSelector.js","utils/closerColor.js","components/AlgorithmSelector.js","components/PaletteCounter.js","components/GlobalCounter.js","components/ImagePixels.js","components/ImagesGrid.js","components/ImageDetail.js","components/Cost.js","selectors/imageColors.js","components/App.js","serviceWorker.js","index.js"],"names":["getPixels","img","w","width","h","height","context","document","createElement","getContext","drawImage","data","getImageData","colors","y","x","i","hex","rgbToHex","r","g","b","toString","padStart","rgbToLab","rgb","z","Math","pow","L","A","B","hexToRgb","replace","m","result","exec","parseInt","extractRgb","d","substring","length","split","React","memo","_ref","setImages","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","async","url","Promise","resolve","reject","Image","src","load","loadImage","newImage","name","image","pixels","oldImages","readAsDataURL","getRootProps","getInputProps","isDragActive","useDropzone","Object","assign","className","accept","images","setPalettes","generatePalette","title","prompt","limit","q","RgbQuant","method","keys","key","sample","newPalette","palette","c","oldPalettes","onClick","useKey","map","style","backgroundColor","concat","palettes","selectedPalette","setSelectedPalette","PalettePixels","algorithms","EUCLIDEAN","DELTA_E76","DELTA_E94","DELTA_E00","algorithm","matchColor","toLab","id","value","lab","includes","from","alg","arguments","undefined","nearestColor","match","color","minIndex","minDistance","Infinity","p","distance","DeltaE","minP","selectedAlgorithm","setSelectedAlgorithm","a","count","colorsGlobal","cost","sprites","PaletteCounter","size","titled","j","colorsImage","currency","setSelectedImage","list","imageRenderer","_ref2","index","alt","imageRendering","ImagePixels","Fragment","total","round","AutoSizer","_ref3","List","rowCount","rowHeight","rowRenderer","moveSelectedImage","useEffect","handleKey","e","keyCode","addEventListener","removeEventListener","toFixed","setCost","askCost","newCost","isNaN","localStorage","setItem","imageColors","createSelectorCreator","memoize","_len","args","Array","_key","reduce","acc","val","JSON","stringify","createSelector","closerColor","colorImage","colorGlobal","flat","matched","newP","App","useState","getItem","defaultPalettes","selectedImage","globalCount","useMemo","FileDropzone","PaletteGenerate","Cost","PaletteSelector","AlgorithmSelector","GlobalCounter","ImagesGrid","ImageDetail","move","imagesKeys","indexOf","newIndex","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02c81bf8.chunk.js","sourcesContent":["const PIXEL_SIZE = 9.826;\n\nconst getPixels = img => {\n  const w = img.width;\n  const h = img.height;\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n  context.drawImage(img, 0, 0);\n\n  const data = context.getImageData(0, 0, w, h).data;\n\n  const colors = [];\n  for (var y = 0; y < h; y++) {\n    colors[y] = [];\n    for (var x = 0; x < w; x++) {\n      const i = (y * w + x) * 4;\n\n      colors[y][x] =\n        data[i + 3] === 0\n          ? 0\n          : {\n              hex: rgbToHex(data[i], data[i + 1], data[i + 2]),\n              r: data[i],\n              g: data[i + 1],\n              b: data[i + 2]\n            };\n    }\n  }\n\n  return colors;\n};\n\nconst rgbToHex = (r, g, b) => {\n  return (\n    \"#\" +\n    r.toString(16).padStart(2, \"0\") +\n    g.toString(16).padStart(2, \"0\") +\n    b.toString(16).padStart(2, \"0\")\n  );\n};\n\nconst loadImage = async url => {\n  const load = url => {\n    return new Promise((resolve, reject) => {\n      let img = new Image();\n      img.onload = () => resolve(img);\n      img.onerror = reject;\n      img.src = url;\n    });\n  };\n\n  return await load(url);\n};\n\nconst rgbToLab = rgb => {\n  let r = rgb.r / 255;\n  let g = rgb.g / 255;\n  let b = rgb.b / 255;\n  let x;\n  let y;\n  let z;\n\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n  x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;\n  y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.0;\n  z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;\n\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n\n  return { L: 116 * y - 16, A: 500 * (x - y), B: 200 * (y - z) };\n};\n\nconst hexToRgb = hex => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => {\n    return r + r + g + g + b + b;\n  });\n\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      }\n    : null;\n};\n\nconst extractRgb = rgb => {\n  const d = rgb\n    .substring(4, rgb.length - 1)\n    .replace(/ /g, \"\")\n    .split(\",\");\n\n  return { r: d[0], g: d[1], b: d[2] };\n};\n\nexport {\n  getPixels,\n  loadImage,\n  rgbToHex,\n  rgbToLab,\n  hexToRgb,\n  extractRgb,\n  PIXEL_SIZE\n};\n","import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { loadImage, getPixels } from \"utils\";\n\nconst FileDropzone = ({ setImages }) => {\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      acceptedFiles.forEach((file) => {\n        const reader = new FileReader();\n\n        reader.onabort = () => console.log(\"file reading was aborted\");\n        reader.onerror = () => console.log(\"file reading has failed\");\n        reader.onload = async () => {\n          const url = reader.result;\n          const img = await loadImage(url);\n\n          const newImage = {\n            name: file.name,\n            width: img.width,\n            height: img.height,\n            image: img,\n            url,\n            pixels: getPixels(img),\n          };\n\n          setImages((oldImages) => {\n            return { ...oldImages, [file.name]: newImage };\n          });\n        };\n\n        reader.readAsDataURL(file);\n      });\n    },\n    [setImages]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div\n      {...getRootProps()}\n      className=\"flex items-center justify-center p-6 w-1/2 mx-2 cursor-pointer text-center hover:bg-gray-800 rounded-lg border-2 border-dashed border-gray-500\"\n    >\n      <input {...getInputProps()} accept=\"image/*\" />\n      {isDragActive ? (\n        <p>Drop the files here ...</p>\n      ) : (\n        <p>Drag 'n' drop some files here, or click to select files</p>\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(FileDropzone);\n","import React, { useCallback } from \"react\";\nimport RgbQuant from \"rgbquant\";\nimport { rgbToHex } from \"utils\";\n\nconst PaletteGenerate = ({ images, setPalettes }) => {\n  const generatePalette = useCallback(() => {\n    const title = prompt(\"Set palette title\", \"New Palette\");\n    const limit = prompt(\"Set palette limit\", 32);\n\n    if (limit && title) {\n      const q = new RgbQuant({ colors: limit, method: 1 });\n\n      Object.keys(images).forEach(key => {\n        q.sample(images[key].image);\n      });\n\n      const newPalette = {};\n      q.palette(true).forEach(c => {\n        const hex = rgbToHex(c[0], c[1], c[2]);\n        newPalette[hex] = hex;\n      });\n\n      setPalettes(oldPalettes => {\n        return { ...oldPalettes, [title]: newPalette };\n      });\n    }\n  }, [images, setPalettes]);\n\n  return (\n    <button\n      onClick={generatePalette}\n      className=\"uppercase flex items-center justify-center cursor-pointer mx-2 p-6 w-1/2 text-center rounded-lg border-2 hover:bg-gray-800 border-dashed border-gray-500\"\n    >\n      Generate palette from images\n    </button>\n  );\n};\n\nexport default React.memo(PaletteGenerate);\n","import React from \"react\";\nimport { PIXEL_SIZE } from \"utils\";\n\nconst PalettePixels = ({ palette, useKey }) => {\n  return (\n    <div className=\"flex flex-wrap items-center justify-center\">\n      {Object.keys(palette).map(c => {\n        return (\n          <div\n            key={c}\n            className=\"inline-block\"\n            style={{\n              backgroundColor: useKey ? c : palette[c],\n              width: `${PIXEL_SIZE}px`,\n              height: `${PIXEL_SIZE}px`\n            }}\n          ></div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(PalettePixels);\n","import React from \"react\";\nimport PalettePixels from \"./PalettePixels\";\n\nconst PaletteSelector = ({ palettes, selectedPalette, setSelectedPalette }) => {\n  return (\n    <div className=\"flex m-3 items-stretch\">\n      {Object.keys(palettes).map(key => {\n        return (\n          <div\n            title={key}\n            key={key}\n            onClick={() =>\n              setSelectedPalette(selectedPalette === key ? null : key)\n            }\n            className={\n              \"flex items-center m-2 cursor-pointer rounded border-2 w p-3 border-dashed\" +\n              (selectedPalette === key\n                ? \" border-gray-400\"\n                : \" border-transparent\")\n            }\n          >\n            <PalettePixels palette={palettes[key]} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(PaletteSelector);\n","import nearestColor from \"nearest-color\";\nimport { rgbToLab, extractRgb, hexToRgb } from \"utils\";\nimport DeltaE from \"delta-e\";\n\nexport const algorithms = {\n  EUCLIDEAN: \"Euclidean\",\n  DELTA_E76: \"DeltaE76\",\n  DELTA_E94: \"DeltaE94\",\n  DELTA_E00: \"DeltaE00\"\n};\n\nlet palette = {};\nlet algorithm;\nlet matchColor;\n\nconst from = (colors, alg = algorithms.EUCLIDEAN) => {\n  algorithm = alg;\n  if (algorithm === algorithms.EUCLIDEAN) {\n    matchColor = nearestColor.from(colors);\n  } else {\n    palette = toLab(colors);\n  }\n};\n\nconst match = color => {\n  if (algorithm === algorithms.EUCLIDEAN) {\n    return matchColor(color);\n  }\n\n  let minDistance = Infinity;\n  let minIndex;\n\n  palette.forEach((p, i) => {\n    const lab = color.includes(\"#\")\n      ? rgbToLab(hexToRgb(color))\n      : rgbToLab(extractRgb(color));\n\n    const distance = DeltaE[\"get\" + algorithm](lab, p.lab);\n    if (distance < minDistance) {\n      minIndex = i;\n      minDistance = distance;\n    }\n  });\n\n  const minP = palette[minIndex];\n\n  return {\n    name: minP.id,\n    value: minP.value,\n    distance: minDistance\n  };\n};\n\nconst toLab = colors => {\n  return Object.keys(colors).map(id => {\n    const value = colors[id];\n    const lab = value.includes(\"#\")\n      ? rgbToLab(hexToRgb(value))\n      : rgbToLab(extractRgb(value));\n\n    return { id, value, lab };\n  });\n};\n\nexport default { from, match };\n","import React from \"react\";\nimport { algorithms } from \"utils/closerColor\";\n\nconst AlgorithmSelector = ({ selectedAlgorithm, setSelectedAlgorithm }) => {\n  return (\n    <div className=\"flex m-1 items-center justify-center text-base text-gray-400\">\n      {Object.keys(algorithms).map(key => {\n        const a = algorithms[key];\n\n        return (\n          <div\n            key={a}\n            onClick={() => setSelectedAlgorithm(a)}\n            className={\n              \"flex items-center m-2 cursor-pointer rounded border-2 py-1 px-2 border-dashed\" +\n              (selectedAlgorithm === a\n                ? \" border-gray-400\"\n                : \" border-transparent\")\n            }\n          >\n            {a}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(AlgorithmSelector);\n","import React from \"react\";\n\nconst PaletteCounter = ({ palette }) => {\n  return (\n    <div className=\"p-3 flex flex-wrap items-center justify-center\">\n      {Object.keys(palette).map(c => {\n        return (\n          <div\n            key={c}\n            title={palette[c].id}\n            className=\"relative inline-flex items-center justify-center w-10 h-10\"\n            style={{ backgroundColor: c }}\n          >\n            <span className=\"absolute px-1 bottom-0 right-0 bg-white text-gray-700 text-xs opacity-25\">\n              {palette[c].count}\n            </span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(PaletteCounter);\n","import React from \"react\";\nimport PaletteCounter from \"./PaletteCounter\";\n\nconst GlobalCounter = ({ colorsGlobal, pixels, cost, sprites }) => {\n  return (\n    <div className=\"p-3\">\n      <div className=\"text-center text-sm uppercase\">\n        <span className=\"mr-2\">\n          Sprites: <b>{sprites}</b>\n        </span>\n        <span className=\"mr-2\">\n          Pixels: <b>{pixels}</b>\n        </span>\n        <span>\n          Cost: <b>${cost}</b>\n        </span>\n      </div>\n      <PaletteCounter palette={colorsGlobal} />\n    </div>\n  );\n};\n\nexport default React.memo(GlobalCounter);\n","import React from \"react\";\n\nconst ImagePixels = ({ pixels, map, palette, width, height, size, titled }) => {\n  return (\n    <div\n      style={{\n        width: width * size + \"px\",\n        height: height * size + \"px\"\n      }}\n    >\n      {pixels.map((r, i) => {\n        return (\n          <div className=\"flex\" key={i} style={{ height: size + \"px\" }}>\n            {r.map((p, j) => {\n              if (!p) {\n                return (\n                  <div\n                    key={j}\n                    className=\"inline-block bg-transparent\"\n                    style={{\n                      width: size + \"px\",\n                      height: size + \"px\"\n                    }}\n                  />\n                );\n              } else {\n                const color = palette ? palette[map[p.hex]] : p.hex;\n\n                return (\n                  <div\n                    key={j}\n                    className=\"inline-block\"\n                    title={titled ? map[p.hex] : null}\n                    style={{\n                      backgroundColor: color,\n                      width: size + \"px\",\n                      height: size + \"px\"\n                    }}\n                  />\n                );\n              }\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(ImagePixels);\n","import React from \"react\";\nimport ImagePixels from \"./ImagePixels\";\nimport PalettePixels from \"./PalettePixels\";\nimport { List, AutoSizer } from \"react-virtualized\";\n\nconst ImagesGrid = ({\n  images,\n  palette,\n  selectedPalette,\n  colorsImage,\n  cost,\n  currency,\n  setSelectedImage,\n}) => {\n  const list = Object.keys(images);\n\n  const imageRenderer = ({ key, index, style }) => {\n    const id = list[index];\n    const image = images[id];\n\n    return (\n      <div\n        key={key}\n        style={style}\n        onClick={() => setSelectedImage(id)}\n        className=\"flex w-1/2 p-2 cursor-pointer hover:bg-gray-800\">\n        <div className=\"w-20 flex items-center justify-center\">\n          <img\n            src={image.url}\n            alt={id}\n            style={{\n              imageRendering: \"pixelated\",\n              width: image.width + \"px\",\n              height: image.height + \"px\",\n            }}\n          />\n        </div>\n        <div className=\"w-20 flex items-center justify-center\">\n          <ImagePixels\n            pixels={image.pixels}\n            palette={palette}\n            map={selectedPalette ? colorsImage[id].map : null}\n            width={image.width}\n            height={image.height}\n            size={1}\n          />\n        </div>\n        {selectedPalette && (\n          <>\n            <div className=\"w-20 flex items-center justify-end text-sm\">\n              {colorsImage[id].total}\n            </div>\n            <div className=\"w-20 flex items-center justify-end text-sm\">\n              R${Math.round(colorsImage[id].total * cost + 9)},00\n            </div>\n            <div className=\"flex-1 flex flex-wrap items-center justify-center px-2\">\n              <PalettePixels palette={colorsImage[id].count} useKey />\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"p-3 flex w-3/4 m-auto flex-col items-center\">\n      <div className=\"flex w-full p-2 text-xs uppercase text-gray-500 bg-gray-800 rounded-t opacity-50\">\n        <div className=\"w-20 flex items-center justify-center\">Original</div>\n        <div className=\"w-20 flex items-center justify-center\">Resultado</div>\n        <div className=\"w-20 flex items-center justify-end\">Pixels</div>\n        <div className=\"w-20 flex items-center justify-end\">Preço</div>\n        <div className=\"flex-1 flex flex-wrap items-center justify-center\">Paleta</div>\n      </div>\n      <div className=\"w-full\">\n        <AutoSizer>\n          {({ width }) => (\n            <List\n              height={300}\n              width={width}\n              rowCount={list.length}\n              rowHeight={80}\n              rowRenderer={imageRenderer}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(ImagesGrid);\n","import React, { useEffect } from \"react\";\nimport ImagePixels from \"./ImagePixels\";\nimport PaletteCounter from \"./PaletteCounter\";\nimport { PIXEL_SIZE } from \"utils\";\n\nconst ImageDetail = ({\n  id,\n  image,\n  colors,\n  palette,\n  selectedPalette,\n  setSelectedImage,\n  moveSelectedImage,\n  cost,\n}) => {\n  useEffect(() => {\n    const handleKey = (e) => {\n      if (e.keyCode === 27) {\n        setSelectedImage(null);\n      }\n\n      if (e.keyCode === 37) {\n        moveSelectedImage(-1);\n      }\n\n      if (e.keyCode === 39) {\n        moveSelectedImage(1);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKey, false);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKey, false);\n    };\n  });\n\n  return (\n    <>\n      <div\n        onClick={() => setSelectedImage(null)}\n        className=\"bg-gray-900 opacity-50 w-full h-full fixed z-20 top-0 left-0\"\n      ></div>\n      <div className=\"w-full h-full px-24 py-10 pointer-events-none fixed z-30 top-0 left-0 flex items-center justify-center\">\n        <button\n          onClick={() => moveSelectedImage(-1)}\n          className=\"mr-2 w-10 h-10 rounded hover:bg-gray-700 flex items-center justify-center text-white font-bold text-xl cursor-pointer pointer-events-auto\"\n        >\n          ◄\n        </button>\n        <div className=\"flex flex-col max-h-full max-w-full p-3 overflow-auto pointer-events-auto bg-gray-700 rounded shadow-lg\">\n          <div className=\"flex flex-wrap items-center justify-center p-3\">\n            <img\n              src={image.url}\n              alt={id}\n              style={{\n                imageRendering: \"pixelated\",\n                width: image.width * PIXEL_SIZE + \"px\",\n                height: image.height * PIXEL_SIZE + \"px\",\n              }}\n            />\n            <ImagePixels\n              pixels={image.pixels}\n              map={selectedPalette ? colors.map : null}\n              palette={palette}\n              width={image.width}\n              height={image.height}\n              size={PIXEL_SIZE}\n              titled={selectedPalette ? true : false}\n            />\n          </div>\n          {selectedPalette && (\n            <>\n              <div className=\"p-3\">\n                <div className=\"text-center text-sm uppercase\">\n                  <span className=\"mr-2\">\n                    Pixels: <b>{colors.total}</b>\n                  </span>\n                  <span>\n                    Cost: <b>${(colors.total * cost).toFixed(2)}</b>\n                  </span>\n                </div>\n              </div>\n              <div className=\"p-3\">\n                <PaletteCounter palette={colors.count} />\n              </div>\n            </>\n          )}\n        </div>\n        <button\n          onClick={() => moveSelectedImage(1)}\n          className=\"ml-2 w-10 h-10 rounded hover:bg-gray-700 flex items-center justify-center text-white font-bold text-xl cursor-pointer pointer-events-auto\"\n        >\n          ►\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(ImageDetail);\n","import React from \"react\";\n\nconst Cost = ({ cost, setCost }) => {\n  const askCost = () => {\n    const newCost = prompt(\"Set cost per pixel\", cost);\n\n    if (newCost && !isNaN(newCost)) {\n      setCost(0.04);\n\n      localStorage.setItem(\"cost\", newCost);\n    }\n  };\n\n  return (\n    <button\n      onClick={askCost}\n      className=\"uppercase flex items-center justify-center cursor-pointer mx-2 p-6 w-1/2 text-center rounded-lg border-2 hover:bg-gray-800 border-dashed border-gray-500 w-16\">\n      Custo por pixel: R${cost}\n    </button>\n  );\n};\n\nexport default React.memo(Cost);\n","import { createSelectorCreator } from \"reselect\";\nimport memoize from \"lodash.memoize\";\n\nconst hashFn = (...args) =>\n  args.reduce((acc, val) => acc + \"-\" + JSON.stringify(val), \"\");\nconst createSelector = createSelectorCreator(memoize, hashFn);\n\nconst imageColors = createSelector(\n  a => a.img,\n  a => a.closerColor,\n  a => a.palette,\n  a => a.selectedAlgorithm,\n  (img, closerColor, palette) => {\n    let count = 0;\n    const colorImage = { total: 0, count: {}, map: {} };\n    const colorGlobal = {};\n\n    img.pixels.flat().forEach(p => {\n      if (!p) {\n        return;\n      }\n\n      let matched;\n      let newP;\n      if (!colorImage.map[p.hex]) {\n        matched = closerColor.match(p.hex);\n        newP = matched.value;\n        colorImage.map[p.hex] = matched.name;\n      } else {\n        newP = palette[colorImage.map[p.hex]];\n      }\n\n      if (!colorImage.count[newP]) {\n        colorImage.count[newP] = { id: matched.name, count: 1 };\n      } else {\n        colorImage.count[newP].count++;\n      }\n\n      if (!colorGlobal[newP]) {\n        colorGlobal[newP] = { id: matched.name, count: 1 };\n      } else {\n        colorGlobal[newP].count++;\n      }\n\n      colorImage.total++;\n      count++;\n    });\n\n    return { colorImage, colorGlobal, count };\n  }\n);\n\nexport default imageColors;\n","import React, { useState, useMemo } from \"react\";\nimport FileDropzone from \"./FileDropzone\";\nimport PaletteGenerate from \"./PaletteGenerate\";\nimport PaletteSelector from \"./PaletteSelector\";\nimport AlgorithmSelector from \"./AlgorithmSelector\";\nimport GlobalCounter from \"./GlobalCounter\";\nimport ImagesGrid from \"./ImagesGrid\";\nimport ImageDetail from \"./ImageDetail\";\nimport Cost from \"./Cost\";\nimport defaultPalettes from \"data/palettes\";\nimport closerColor, { algorithms } from \"utils/closerColor\";\nimport imageColors from \"selectors/imageColors\";\n\nconst DEFAULT_COST = 0.04;\n\nconst App = () => {\n  const [cost, setCost] = useState(localStorage.getItem(\"cost\") || DEFAULT_COST);\n  const [images, setImages] = useState({});\n  const [palettes, setPalettes] = useState(defaultPalettes);\n  const [selectedPalette, setSelectedPalette] = useState(null);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(algorithms.DELTA_E00);\n\n  const moveSelectedImage = (move) => {\n    const imagesKeys = Object.keys(images);\n    const index = imagesKeys.indexOf(selectedImage);\n    const newIndex =\n      index + move < 0\n        ? imagesKeys.length - 1\n        : index + move > imagesKeys.length - 1\n        ? 0\n        : index + move;\n\n    setSelectedImage(imagesKeys[newIndex]);\n  };\n\n  const palette = palettes[selectedPalette];\n\n  const { colorsImage, colorsGlobal, globalCount } = useMemo(() => {\n    const colorsImage = {};\n    const colorsGlobal = {};\n    let globalCount = 0;\n\n    if (palette) {\n      closerColor.from(palette, selectedAlgorithm);\n\n      Object.keys(images).forEach((key) => {\n        const img = images[key];\n\n        const { colorImage, colorGlobal, count } = imageColors({\n          img,\n          closerColor,\n          palette,\n          selectedAlgorithm,\n        });\n\n        colorsImage[key] = colorImage;\n        globalCount += count;\n        Object.keys(colorGlobal).forEach((p) => {\n          if (!colorsGlobal[p]) {\n            colorsGlobal[p] = colorGlobal[p];\n          } else {\n            colorsGlobal[p].count += colorGlobal[p].count;\n          }\n        });\n      });\n    }\n\n    return { colorsImage, colorsGlobal, globalCount };\n  }, [images, palette, selectedAlgorithm]);\n\n  const sprites = Object.keys(images).length;\n\n  return (\n    <div className=\"w-screen h-screen font-sans text-white p-3\">\n      <div className=\"flex p-3 text-gray-500 uppercase text-base\">\n        <FileDropzone {...{ setImages }} />\n        <PaletteGenerate {...{ images, setPalettes }} />\n        <Cost {...{ cost, setCost }} />\n      </div>\n      <PaletteSelector {...{ palettes, selectedPalette, setSelectedPalette }} />\n      <AlgorithmSelector {...{ selectedAlgorithm, setSelectedAlgorithm }} />\n      {selectedPalette && sprites > 0 && (\n        <GlobalCounter\n          pixels={globalCount}\n          sprites={sprites}\n          cost={(globalCount * cost).toFixed(2)}\n          colorsGlobal={colorsGlobal}\n        />\n      )}\n      {Object.keys(images).length > 0 && (\n        <ImagesGrid\n          {...{\n            palette,\n            images,\n            selectedPalette,\n            colorsImage,\n            cost,\n            setSelectedImage,\n          }}\n        />\n      )}\n      {selectedImage && (\n        <ImageDetail\n          id={selectedImage}\n          image={images[selectedImage]}\n          colors={colorsImage[selectedImage]}\n          {...{\n            palette,\n            selectedPalette,\n            setSelectedImage,\n            cost,\n            moveSelectedImage,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}